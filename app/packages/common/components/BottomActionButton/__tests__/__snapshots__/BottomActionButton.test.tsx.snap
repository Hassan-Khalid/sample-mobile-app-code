// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BottomActionButton renders correctly 1`] = `
<View
  style={
    {
      "ZIndex": 9999,
      "backgroundColor": {
        "dynamic": {
          "dark": "#FFF",
          "highContrastDark": undefined,
          "highContrastLight": undefined,
          "light": "#FFFFFF",
        },
      },
      "borderTopColor": {
        "dynamic": {
          "dark": "#77889d",
          "highContrastDark": undefined,
          "highContrastLight": undefined,
          "light": "#77889d",
        },
      },
      "borderTopWidth": 0,
      "borderWidth": 1,
      "bottom": 1,
      "height": 80,
      "justifyContent": "center",
      "left": 0,
      "position": "absolute",
      "right": 0,
      "shadowColor": "#000",
      "shadowOffset": {
        "height": 2,
        "width": 0,
      },
      "shadowOpacity": 0.3,
      "shadowRadius": 5,
    }
  }
>
  <RCTScrollView
    contentContainerStyle={
      {
        "alignItems": "center",
        "backgroundColor": {
          "dynamic": {
            "dark": "#FFF",
            "highContrastDark": undefined,
            "highContrastLight": undefined,
            "light": "#FFFFFF",
          },
        },
        "flexDirection": "row",
        "flexGrow": 1,
        "justifyContent": "space-evenly",
      }
    }
    data={
      [
        {
          "onPress": [Function],
          "size": "large",
          "title": "Login",
          "type": "solid",
        },
      ]
    }
    getItem={[Function]}
    getItemCount={[Function]}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEnabled={false}
    scrollEventThrottle={0.0001}
    stickyHeaderIndices={[]}
    viewabilityConfigCallbackPairs={[]}
  >
    <View>
      <View
        onFocusCapture={[Function]}
        onLayout={[Function]}
        style={null}
      >
        <View
          style={
            [
              {
                "overflow": "hidden",
              },
              {
                "borderRadius": 2,
              },
              undefined,
              false,
            ]
          }
          testID="RNE_BUTTON_WRAPPER"
        >
          <View
            accessibilityLabel="button-component"
            accessibilityRole="button"
            accessibilityState={
              {
                "busy": false,
                "checked": undefined,
                "disabled": false,
                "expanded": undefined,
                "selected": undefined,
              }
            }
            accessibilityValue={
              {
                "max": undefined,
                "min": undefined,
                "now": undefined,
                "text": undefined,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              {
                "opacity": 1,
              }
            }
            testID="button-component"
          >
            <View
              style={
                {
                  "alignItems": "center",
                  "backgroundColor": {
                    "dynamic": {
                      "dark": "#64b4fa",
                      "highContrastDark": undefined,
                      "highContrastLight": undefined,
                      "light": "#0000EE",
                    },
                  },
                  "borderColor": "#2089dc",
                  "borderRadius": 10,
                  "borderWidth": 0,
                  "flexDirection": "row",
                  "height": 45,
                  "justifyContent": "center",
                  "marginHorizontal": 30,
                  "padding": 8,
                  "paddingHorizontal": 10,
                  "width": 700,
                }
              }
            />
          </View>
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;

exports[`BottomActionButton should render empty 1`] = `
<View
  style={
    {
      "ZIndex": 9999,
      "backgroundColor": {
        "dynamic": {
          "dark": "#FFF",
          "highContrastDark": undefined,
          "highContrastLight": undefined,
          "light": "#FFFFFF",
        },
      },
      "borderTopColor": {
        "dynamic": {
          "dark": "#77889d",
          "highContrastDark": undefined,
          "highContrastLight": undefined,
          "light": "#77889d",
        },
      },
      "borderTopWidth": 0,
      "borderWidth": 1,
      "bottom": 1,
      "height": 80,
      "justifyContent": "center",
      "left": 0,
      "position": "absolute",
      "right": 0,
      "shadowColor": "#000",
      "shadowOffset": {
        "height": 2,
        "width": 0,
      },
      "shadowOpacity": 0.3,
      "shadowRadius": 5,
    }
  }
>
  <RCTScrollView
    contentContainerStyle={
      {
        "alignItems": "center",
        "backgroundColor": {
          "dynamic": {
            "dark": "#FFF",
            "highContrastDark": undefined,
            "highContrastLight": undefined,
            "light": "#FFFFFF",
          },
        },
        "flexDirection": "row",
        "flexGrow": 1,
        "justifyContent": "space-evenly",
      }
    }
    data={[]}
    getItem={[Function]}
    getItemCount={[Function]}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEnabled={false}
    scrollEventThrottle={0.0001}
    stickyHeaderIndices={[]}
    viewabilityConfigCallbackPairs={[]}
  >
    <View />
  </RCTScrollView>
</View>
`;
